        -:    0:Source:src/leFicheiro.c
        -:    0:Graph:coverage/leFicheiro.gcno
        -:    0:Data:coverage/leFicheiro.gcda
        -:    0:Runs:1
        -:    1:#include "../include/leFicheiro.h"
        -:    2:
        -:    3:/*  Lê o conteúdo de um ficheiro e carrega-o na matriz fornecida.
        -:    4:
        -:    5:  O formato esperado do ficheiro é:
        -:    6:  - Primeira linha: dois dígitos separados por espaço, representando o número de linhas (L) e colunas (C) da matriz.
        -:    7:  - Linhas seguintes: caracteres da matriz, linha a linha.
        -:    8:*/
        -:    9:
        8:   10:int leFicheiro(char* nomeMatriz, char* nomeStackMat, Matriz *m, StackMat* s) {
        8:   11:    FILE* fpM;
        8:   12:    FILE* fpS;   
        8:   13:    int r=0;
        -:   14:
        -:   15:    //matriz atual
        8:   16:    fpM = fopen(nomeMatriz, "r");
        8:   17:    if (fpM == NULL) {
        1:   18:        printf ("Erro ao abrir o ficheiro.");
        1:   19:        return 1; 
        -:   20:    }
        -:   21:
       7*:   22:    if (m->matriz != NULL) liberaMatriz(m);
        -:   23:    
        7:   24:    leMatriz(m, fpM);
        7:   25:    fclose(fpM); 
        -:   26:
        -:   27:    //stackMat
        -:   28:
        7:   29:    if (s->tam != 0){
        5:   30:        liberaStackMat(s);
        5:   31:        initStackMat(s);
        -:   32:    }
        -:   33:  
        7:   34:    if ((fpS = fopen(nomeStackMat, "r"))) //o ficheiro já existe
        -:   35:    {
        -:   36:
        7:   37:        leStackMat(s, fpS);
        7:   38:        fclose(fpS);
        -:   39:    }
        -:   40:
        -:   41:    //matriz inicial na stackMat
        7:   42:    copiaMatriz(&s->mInicial, m);
        -:   43:
        7:   44:    return r; 
        -:   45:}  
        -:   46:
       19:   47:void leMatriz(Matriz* m, FILE* fp){
       19:   48:    int i, j;
       19:   49:    char temp;
        -:   50:    
       19:   51:    leNumero(&m->L, fp);
       19:   52:    leNumero(&m->C, fp);
        -:   53:
       19:   54:    if (m->L <= 0 || m->C <= 0){
        1:   55:        m->matriz = NULL;
        1:   56:        printf ("Erro: ficheiro não contém uma matriz válida.");
        -:   57:    }
        -:   58:    
        -:   59:   
       19:   60:    m->matriz = malloc(sizeof(char*)*m->L);
      149:   61:    for (i=0; i<m->L; i++){
      130:   62:        m->matriz[i] = malloc(sizeof(char)*m->C);
        -:   63:        
     1524:   64:        for (j=0; j<m->C; j++){
     1394:   65:            temp = fgetc(fp); 
     1506:   66:            while (temp == ' ' || temp == '\n'){//ignora espacos e newlines
      112:   67:                temp = fgetc(fp);
        -:   68:            }
     1394:   69:            m->matriz[i][j] = temp;
        -:   70:             
        -:   71:        }
        -:   72:    }
        -:   73:
       19:   74:    temp = fgetc(fp);
       19:   75:}
        -:   76:
       10:   77:void leStackMat(StackMat* s, FILE* fp){
       10:   78:    char temp;
       10:   79:    int i;
        -:   80:
        -:   81:    //s->cabeca e s->tam
       10:   82:    leNumero(&s->cabeca, fp);
       10:   83:    leNumero(&s->tam, fp);
        -:   84:
       10:   85:    if (s->cabeca <= -1 || s->tam <= 0){
        1:   86:        s->dados = NULL;
        1:   87:        s->comandos = NULL; 
        1:   88:        printf ("Erro: ficheiro não contém um histórico válido.");
        -:   89:    }
        -:   90:
       10:   91:    s->comandos = realloc(s->comandos, sizeof(char)*s->tam);
       10:   92:    s->dados = realloc(s->dados, sizeof(Matriz) * s->tam);
       19:   93:    for (i=0; i<=s->cabeca; i++){
        -:   94:        //comando
        9:   95:        temp = fgetc(fp);
        9:   96:        s->comandos[i] = temp;
        9:   97:        temp = fgetc(fp);
        -:   98:
        -:   99:        //matriz
        9:  100:        leMatriz(&s->dados[i], fp);
        -:  101:    }
       10:  102:}
        -:  103:
       60:  104:void leNumero(int *x, FILE* fp) {
       60:  105:    *x = 0;
       60:  106:    int negativo = 0;
       60:  107:    char c = fgetc(fp);
        -:  108:
       60:  109:    while (c == ' ' || c == '\n') {
    #####:  110:        c = fgetc(fp);
        -:  111:    }
        -:  112:
       60:  113:    if (c == '-') {
        2:  114:        negativo = 1;
        2:  115:        c = fgetc(fp);
        -:  116:    }
        -:  117:
      124:  118:    while (c >= '0' && c <= '9') {
       64:  119:        *x = (*x * 10) + (c - '0');
       64:  120:        c = fgetc(fp);
        -:  121:    }
        -:  122:
       60:  123:    if (negativo) {
        2:  124:        *x = -*x;
        -:  125:    }
       60:  126:}
